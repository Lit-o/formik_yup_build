{"version":3,"sources":["Form.js","App.js","index.js"],"names":["Form","formik","useFormik","initialValues","name","email","amount","currency","text","terms","validationSchema","yup","min","required","oneOf","onSubmit","values","console","log","JSON","stringify","className","handleSubmit","htmlFor","id","type","getFieldProps","errors","touched","value","onChange","handleChange","onBlur","handleBlur","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAiIeA,EA3GF,WACT,IAAMC,EAASC,YAAU,CACrBC,cAAe,CACXC,KAAM,GACNC,MAAO,GACPC,OAAQ,EACRC,SAAU,GACVC,KAAM,GACNC,OAAO,GAGXC,iBAAkBC,IAAW,CACzBP,KAAMO,MACGC,IAAI,EAAG,yIACPC,SAAS,uHAClBR,MAAOM,MACEN,MAAM,iIACNQ,SAAS,uHAClBP,OAAQK,MACCC,IAAI,EAAG,SACPC,WACTN,SAAUI,MAAaE,SAAS,uHAChCJ,MAAOE,MACEE,SAAS,iIACTC,MAAM,EAAC,GAAO,mIAE3BC,SAAU,SAAAC,GACNC,QAAQC,IAAIC,KAAKC,UAAUJ,EAAQ,KAAM,OAIjD,OACI,uBAAMK,UAAU,OAAON,SAAUd,EAAOqB,aAAxC,UACI,6HACA,uBAAOC,QAAQ,OAAf,yDACA,mCACIC,GAAG,OACHpB,KAAK,OACLqB,KAAK,QACAxB,EAAOyB,cAAc,UAE7BzB,EAAO0B,OAAOvB,MAAQH,EAAO2B,QAAQxB,MAAQ,mBAAGiB,UAAU,QAAb,SAAsBpB,EAAO0B,OAAOvB,OAElF,uBAAOmB,QAAQ,QAAf,qEACA,uBACIC,GAAG,QACHpB,KAAK,QACLqB,KAAK,QACLI,MAAO5B,EAAOe,OAAOX,MACrByB,SAAU7B,EAAO8B,aACjBC,OAAQ/B,EAAOgC,aAElBhC,EAAO0B,OAAOtB,OAASJ,EAAO2B,QAAQvB,OAAS,mBAAGgB,UAAU,QAAb,SAAsBpB,EAAO0B,OAAOtB,QAEpF,uBAAOkB,QAAQ,SAAf,0EACA,uBACIC,GAAG,SACHpB,KAAK,SACLqB,KAAK,SACLI,MAAO5B,EAAOe,OAAOV,OACrBwB,SAAU7B,EAAO8B,aACjBC,OAAQ/B,EAAOgC,aAElBhC,EAAO0B,OAAOrB,QAAUL,EAAO2B,QAAQtB,QAAU,mBAAGe,UAAU,QAAb,SAAsBpB,EAAO0B,OAAOrB,SAEtF,uBAAOiB,QAAQ,WAAf,kDACA,yBACIC,GAAG,WACHpB,KAAK,WACLyB,MAAO5B,EAAOe,OAAOT,SACrBuB,SAAU7B,EAAO8B,aACjBC,OAAQ/B,EAAOgC,WALnB,UAOI,wBAAQJ,MAAM,GAAd,mGACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,MAAd,oBAEH5B,EAAO0B,OAAOpB,UAAYN,EAAO2B,QAAQrB,UAAY,mBAAGc,UAAU,QAAb,SAAsBpB,EAAO0B,OAAOpB,WAE1F,uBAAOgB,QAAQ,OAAf,6FACA,0BACIC,GAAG,OACHpB,KAAK,OACLyB,MAAO5B,EAAOe,OAAOR,KACrBsB,SAAU7B,EAAO8B,aACjBC,OAAQ/B,EAAOgC,aAElBhC,EAAO0B,OAAOnB,MAAQP,EAAO2B,QAAQpB,MAAQ,mBAAGa,UAAU,QAAb,SAAsBpB,EAAO0B,OAAOnB,OAElF,wBAAOa,UAAU,WAAjB,UACI,uBACIjB,KAAK,QACLqB,KAAK,WACLI,MAAO5B,EAAOe,OAAOP,MACrBqB,SAAU7B,EAAO8B,aACjBC,OAAQ/B,EAAOgC,aANvB,0PAUChC,EAAO0B,OAAOlB,OAASR,EAAO2B,QAAQnB,OAAS,mBAAGY,UAAU,QAAb,SAAsBpB,EAAO0B,OAAOlB,QAEpF,wBAAQgB,KAAK,SAAb,wECxGGS,MAVf,WACE,OACE,qBAAKb,UAAU,MAAf,SACI,cAAC,EAAD,OCTRc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.0718d1cb.chunk.js","sourcesContent":["import { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nconst validate = values => {\n    const errors = {}\n    if (!values.name) {\n        errors.name = 'Обязательное поле // Required field'\n    } else if (values.name.length < 2) {\n        errors.name = 'Минимум два символа // Need two letters at least';\n    }\n\n    if (!values.email) {\n        errors.email = 'Обязательное поле // Required field'\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Соблюдайте формат email // Wrong email format';\n    }\n\n    return errors;\n}\n\n\n\nconst Form = () => {\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            amount: 0,\n            currency: '',\n            text: '',\n            terms: false\n        },\n        // validate,       my custom validator disable now\n        validationSchema: yup.object({\n            name: yup.string()\n                    .min(2, 'Минимум два символа // Need two letters at least')\n                    .required('Обязательное поле // Required field'),\n            email: yup.string()\n                    .email('Соблюдайте формат email // Wrong email format')\n                    .required('Обязательное поле // Required field'),\n            amount: yup.number()\n                    .min(5, 'min 5')\n                    .required(),\n            currency: yup.string().required('Обязательное поле // Required field'),\n            terms: yup.boolean()\n                    .required('Необходимо согласие // Agree needed')\n                    .oneOf([true], 'Необходимо согласие // Agree needed')\n        }),\n        onSubmit: values => {\n            console.log(JSON.stringify(values, null, 2))\n        }\n    })\n\n    return (\n        <form className=\"form\" onSubmit={formik.handleSubmit}>\n            <h2>Отправить деньги</h2>\n            <label htmlFor=\"name\">Ваше имя</label>\n            <input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                { ...formik.getFieldProps('name') }\n            />\n            {formik.errors.name && formik.touched.name && <p className='error'>{formik.errors.name}</p>}\n\n            <label htmlFor=\"email\">Ваша почта</label>\n            <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            {formik.errors.email && formik.touched.email && <p className='error'>{formik.errors.email}</p>}\n\n            <label htmlFor=\"amount\">Количество</label>\n            <input\n                id=\"amount\"\n                name=\"amount\"\n                type=\"number\"\n                value={formik.values.amount}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            {formik.errors.amount && formik.touched.amount && <p className='error'>{formik.errors.amount}</p>}\n\n            <label htmlFor=\"currency\">Валюта</label>\n            <select\n                id=\"currency\"\n                name=\"currency\"\n                value={formik.values.currency}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            >\n                <option value=\"\">Выберите валюту</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"UAH\">UAH</option>\n                <option value=\"RUB\">RUB</option>\n            </select>\n            {formik.errors.currency && formik.touched.currency && <p className='error'>{formik.errors.currency}</p>}\n\n            <label htmlFor=\"text\">Ваше сообщение</label>\n            <textarea\n                id=\"text\"\n                name=\"text\"\n                value={formik.values.text}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n            />\n            {formik.errors.text && formik.touched.text && <p className='error'>{formik.errors.text}</p>}\n\n            <label className=\"checkbox\">\n                <input\n                    name=\"terms\"\n                    type=\"checkbox\"\n                    value={formik.values.terms}\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                />\n                Соглашаетесь с политикой конфиденциальности?\n            </label>\n            {formik.errors.terms && formik.touched.terms && <p className='error'>{formik.errors.terms}</p>}\n\n            <button type=\"submit\">Отправить</button>\n        </form>\n    )\n}\n\nexport default Form;","import './app.scss';\nimport Form from './Form';\n// import FormComponent from './FormComponent';\n\n\n// formik has good documentation and tutorial\n// https://formik.org/docs/tutorial\n\n// React Hook Form - may be good choise too\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Form/>\n        {/* <hr/>\n        <FormComponent/> */}\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}